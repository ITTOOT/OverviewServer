@typeparam TRowData

@*
    <CascadingValue> allows descendant components (defined in ChildContent) to receive the specified value.
    Child components need to declare a cascading parameter with the same type as "Value" (i.e. Grid<TRowData>).
    This allows GridColumn to get the Grid instance by using a CascadingParameter

        [CascadingParameter]public Grid<TRowData> OwnerGrid { get; set; }

    IsFixed="true" indicates that "Value" will not change. This is a
    performance optimization that allows the framework to skip setting up
    change notifications.
*@
<CascadingValue IsFixed="true" Value="this">@ChildContent</CascadingValue>

@* Render the table *@
<table @attributes="@TableAttributes">
    <thead>
        <tr>
            @foreach (var column in columns)
            {
                @column.HeaderTemplate
            }
        </tr>
    </thead>
    <tbody>
        @{
            if(Items != null)
            {
                var index = 0;
                foreach (var item in Items)
                {
                    @* Use @key tho help the diff algorithm when updating the collection *@
                    <tr @key="item.GetHashCode()" class="@(RowClass.Invoke(item, index++))">
                        @foreach (var column in columns)
                        {
                            @column.CellTemplate(item)
                        }
                    </tr>
                }
            }
        }
    </tbody>
</table>


@code {
    //PARAMETERS
    //Dictionary for table attributes
    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> TableAttributes { get; set; }

    //Collection of items/values for table rows
    [Parameter]
    public ICollection<TRowData> Items { get; set; }

    //This fragment should contain all the GridColumn's
    [Parameter]
    public RenderFragment ChildContent { get; set; }

    //For adding rows to the table
    [Parameter]
    public Func<TRowData, int, string> RowClass { get; set; }

    //List to store columns using GridColumn component
    private readonly List<XGridColumn<TRowData>> columns = new List<XGridColumn<TRowData>>();

    //GridColumn component uses this method to add a column
    internal void AddColumn(XGridColumn<TRowData> column)
    {
        columns.Add(column);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            // The first render will instantiate the GridColumn defined in the ChildContent.
            // GridColumn calls AddColumn during its initialization. This means that until
            // the first render is completed, the columns collection is empty.
            // Calling StateHasChanged() will re-render the component, so the second time it will know the columns
            StateHasChanged();
        }
    }
}
